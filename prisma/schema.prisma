// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

/// Defines the database connection. We're using PostgreSQL.
/// The URL is loaded from the .env file for security.
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

/// Configures the Prisma Client generator.
/// This tells Prisma how to generate the client based on our models.
generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------------------------- //
// ENUMS: For defining a set of allowed values for a field.
// ---------------------------------------------------------------- //

/// Defines user roles for access control.
enum Role {
  USER
  ADMIN
}

/// Defines the possible statuses for an order.
enum OrderStatus {
  PENDING     // Order placed, awaiting payment confirmation.
  PROCESSING  // Payment confirmed, order is being prepared.
  SHIPPED     // Order has been shipped.
  DELIVERED   // Order has been delivered.
  CANCELLED   // Order was cancelled.
}

/// Defines the standard clothing sizes.
enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

// ---------------------------------------------------------------- //
// AUTH MODELS: Required for NextAuth.js authentication.
// ---------------------------------------------------------------- //

/// Represents a user account in the system.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// Represents an active user session.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// Represents a user of the application.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  /// Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  addresses     Address[]
  reviews       Review[]
}

/// Used for "magic link" email sign-ins.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------------------------------------------------------------- //
// E-COMMERCE MODELS: The core of our clothing store.
// ---------------------------------------------------------------- //

/// Represents a product category.
model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  /// Relations
  products  Product[]
}

/// This is the base product, like "Classic T-Shirt".
/// It doesn't have a price or stock itself; its variants do.
model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  /// Relations
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  reviews     Review[]
}

/// This represents a specific version of a product, e.g.,
/// "Classic T-Shirt, Blue, Size M". This is what users add to the cart.
model ProductVariant {
  id        String   @id @default(cuid())
  color     String   // e.g., "Blue", "#0000FF"
  size      Size
  price     Float    // Price for this specific variant
  stock     Int      // Inventory count for this variant
  images    String[] // List of image URLs for this variant

  /// Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@unique([productId, color, size]) // Ensures no duplicate variants
}

/// Represents a customer's order.
model Order {
  id              String      @id @default(cuid())
  total           Float
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  /// Relations
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  shippingAddressId String
  shippingAddress Address     @relation(fields: [shippingAddressId], references: [id])
}

/// A specific item within an order.
model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float    // Price of the variant at the time of purchase

  /// Relations
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  variantId   String
  variant     ProductVariant @relation(fields: [variantId], references: [id])
}

/// Represents a user's review of a product.
model Review {
  id        String   @id @default(cuid())
  rating    Int      // e.g., 1 to 5
  comment   String?
  createdAt DateTime @default(now())

  /// Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // A user can only review a product once
}

/// Represents a user's saved shipping address.
model Address {
  id          String   @id @default(cuid())
  street      String
  city        String
  state       String
  zipCode     String
  country     String
  isDefault   Boolean  @default(false)
  
  /// Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  orders      Order[]
}